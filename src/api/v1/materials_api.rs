
use std::sync::Arc;
use axum::{Extension, Json, http::StatusCode};
use serde_json::{json, Value};
use tracing::{debug, error, info, warn};

use crate::error::{ApiResult, AppError};
use crate::services::materials::MaterialsService;
use crate::models::materials::MaterialsResponse;
use crate::setting::models::app_state::AppState;

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
/// 
/// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 
/// —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏, —Ç–æ–ª—â–∏–Ω–∞–º–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.
/// 
/// # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
/// 
/// * `state` - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–∏—Å–∞–º
/// 
/// # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
/// 
/// * `ApiResult<Json<MaterialsResponse>>` - JSON —Å —Å–ø–∏—Å–∫–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞
/// 
/// # –ö–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤
/// 
/// * `200 OK` - –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
/// * `500 Internal Server Error` - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
/// 
/// # –ü—Ä–∏–º–µ—Ä—ã
/// 
/// ```json
/// {
///   "materials": [
///     {
///       "material_type": "–õ–î–°–ü",
///       "name_ru": "–õ–î–°–ü (Laminated Chipboard)",
///       "name_en": "Laminated Chipboard",
///       "standard_sizes": [
///         {
///           "width": 2750,
///           "height": 1830,
///           "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç",
///           "common_usage": "–ú–µ–±–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
///         }
///       ],
///       "default_thicknesses": [8, 10, 16, 18, 22, 25, 28, 32],
///       "properties": {
///         "can_rotate": false,
///         "has_grain": true,
///         "recommended_blade_width": 4.0,
///         "recommended_edge_margin": 8.0
///       }
///     }
///   ]
/// }
/// ```
pub async fn get_materials(
    Extension(state): Extension<Arc<AppState>>
) -> ApiResult<Json<MaterialsResponse>> {
    info!("üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ API");
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let materials_service = &state.materials_service;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É
    match materials_service.get_all_materials().await {
        Ok(response) => {
            info!("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", response.materials.len());
            debug!("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {:?}", response.materials.iter().map(|m| &m.material_type).collect::<Vec<_>>());
            Ok(Json(response))
        }
        Err(e) => {
            error!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {}", e);
            Err(e)
        }
    }
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
/// 
/// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤,
/// —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.
pub async fn materials_health_check(
    Extension(state): Extension<Arc<AppState>>
) -> ApiResult<Json<Value>> {
    debug!("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");
    
    match state.materials_service.health_check().await {
        Ok(_) => {
            let response = json!({
                "status": "healthy",
                "component": "materials_api",
                "timestamp": chrono::Utc::now().to_rfc3339()
            });
            Ok(Json(response))
        }
        Err(e) => {
            error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ materials API: {}", e);
            Err(e)
        }
    }
}