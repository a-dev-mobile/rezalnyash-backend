mod models;
mod server;
mod handlers;
mod json_generator;
mod app_state;

use log::{debug, error, info, warn};
use std::net::SocketAddr;

#[tokio::main]
async fn main() {
    println!("üî™ –ó–∞–ø—É—Å–∫ –†–µ–∑–∞–ª—å–ù—è—à v0.2.0 üî™");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    env_logger::init();
    
    info!("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
    debug!("–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    warn!("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ");
    error!("–û—à–∏–±–∫–∞: {}", "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let state = app_state::create_state();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!("–†–µ–∑–∞–ª—å–ù—è—à –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{}", addr);
    println!("–û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω—è—à–Ω—ã–π —Ä–∞—Å–∫—Ä–æ–π...");
    println!("–î–æ—Å—Ç—É–ø–Ω—ã–µ API:");
    println!("  JSON API: POST/GET /api/sheet");
    println!("  –ü—Ä–∏–º–µ—Ä—ã: GET /api/examples/request - –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞");
    println!("           GET /api/examples/response - –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞");
    
    server::start_server(state, addr).await;
}